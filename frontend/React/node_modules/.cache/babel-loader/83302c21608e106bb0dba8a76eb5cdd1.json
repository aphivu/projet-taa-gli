{"ast":null,"code":"//import fetch from 'cross-fetch'\nimport fetch from 'cross-fetch';\nimport { apiUrl } from '../../requests/utils';\nvar LOGIN_REQUEST = 'LOGIN_REQUEST';\nvar LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nvar LOGIN_FAILURE = 'LOGIN_FAILURE';\nvar LOGOUT_REQUEST = 'LOGIN_REQUEST';\nvar LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nvar LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\nfunction loginRequest(username, password) {\n  return {\n    type: LOGIN_REQUEST,\n    username: username,\n    password: password\n  };\n}\n\nfunction loginSucess(username, password) {\n  return {\n    type: LOGIN_SUCCESS,\n    username: username,\n    password: password\n  };\n}\n\nfunction loginFailure() {\n  return {\n    type: LOGIN_FAILURE\n  };\n}\n\nexport function login(username, password) {\n  console.log(\"Login\");\n  return function (dispatch) {\n    dispatch(loginRequest(username, password));\n    var loginHeader = {\n      method: 'POST',\n      headers: {\n        'Authorization': 'Basic ' + btoa(username + ':' + password)\n      }\n    };\n    return fetch(apiUrl + '/loginApp', loginHeader).then(function (response) {\n      if (response.ok) {\n        response.json().then(function (responseJson) {\n          if (responseJson) {\n            console.log(\"response ok\");\n            dispatch(loginSucess(username, password));\n          } else {\n            dispatch(loginFailure());\n          }\n        });\n      } else {\n        dispatch(loginFailure());\n      }\n    }, function (error) {\n      console.log('An error occurred.', error);\n      dispatch(loginFailure());\n    });\n  };\n}\n\nfunction logoutRequest() {\n  return {\n    type: LOGOUT_REQUEST\n  };\n}\n\nfunction logoutSucess() {\n  return {\n    type: LOGIN_SUCCESS\n  };\n}\n\nfunction logoutFailure() {\n  return {\n    type: LOGIN_FAILURE\n  };\n}","map":{"version":3,"sources":["/home/phi/Documents/M2 CCN/Cours/TAA/Projet/UI/frontend_react/src/redux/actions/userAction.js"],"names":["fetch","apiUrl","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT_REQUEST","LOGOUT_SUCCESS","LOGOUT_FAILURE","loginRequest","username","password","type","loginSucess","loginFailure","login","console","log","dispatch","loginHeader","method","headers","btoa","then","response","ok","json","responseJson","error","logoutRequest","logoutSucess","logoutFailure"],"mappings":"AAAA;AACA,OAAOA,KAAP,MAAkB,aAAlB;AACA,SAAQC,MAAR,QAAqB,sBAArB;AAEA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,aAAa,GAAG,eAAtB;AACA,IAAMC,aAAa,GAAG,eAAtB;AAEA,IAAMC,cAAc,GAAG,eAAvB;AACA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,cAAc,GAAG,gBAAvB;;AAGA,SAASC,YAAT,CAAsBC,QAAtB,EAA+BC,QAA/B,EAAwC;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAET,aADH;AAEHO,IAAAA,QAAQ,EAAEA,QAFP;AAGHC,IAAAA,QAAQ,EAAEA;AAHP,GAAP;AAKH;;AAED,SAASE,WAAT,CAAqBH,QAArB,EAA+BC,QAA/B,EAAwC;AACpC,SAAO;AACHC,IAAAA,IAAI,EAAER,aADH;AAEHM,IAAAA,QAAQ,EAACA,QAFN;AAGHC,IAAAA,QAAQ,EAACA;AAHN,GAAP;AAKH;;AAED,SAASG,YAAT,GAAuB;AACnB,SAAO;AACHF,IAAAA,IAAI,EAAEP;AADH,GAAP;AAGH;;AAID,OAAO,SAASU,KAAT,CAAeL,QAAf,EAAwBC,QAAxB,EAAiC;AACpCK,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AAEA,SAAO,UAAUC,QAAV,EAAmB;AAEtBA,IAAAA,QAAQ,CAACT,YAAY,CAACC,QAAD,EAAUC,QAAV,CAAb,CAAR;AAEA,QAAMQ,WAAW,GAAG;AAChBC,MAAAA,MAAM,EAAE,MADQ;AAEhBC,MAAAA,OAAO,EAAE;AACP,yBAAiB,WAAUC,IAAI,CAACZ,QAAQ,GAAG,GAAX,GAAiBC,QAAlB;AADxB;AAFO,KAApB;AAOA,WAAOV,KAAK,CAACC,MAAM,GAAG,WAAV,EAAsBiB,WAAtB,CAAL,CACEI,IADF,CACO,UAACC,QAAD,EAAc;AAChB,UAAIA,QAAQ,CAACC,EAAb,EAAgB;AACZD,QAAAA,QAAQ,CAACE,IAAT,GACCH,IADD,CACM,UAACI,YAAD,EAAkB;AACpB,cAAIA,YAAJ,EAAiB;AACbX,YAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACAC,YAAAA,QAAQ,CAACL,WAAW,CAACH,QAAD,EAAUC,QAAV,CAAZ,CAAR;AACH,WAHD,MAIK;AACDO,YAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACH;AACJ,SATD;AAUH,OAXD,MAWO;AACHI,QAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACH;AACJ,KAhBF,EAiBK,UAAAc,KAAK,EAAI;AACLZ,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCW,KAAlC;AACAV,MAAAA,QAAQ,CAACJ,YAAY,EAAb,CAAR;AACH,KApBN,CAAP;AAsBH,GAjCD;AAkCH;;AAED,SAASe,aAAT,GAAwB;AACpB,SAAO;AACHjB,IAAAA,IAAI,EAAGN;AADJ,GAAP;AAGH;;AAED,SAASwB,YAAT,GAAuB;AACnB,SAAO;AACHlB,IAAAA,IAAI,EAAGR;AADJ,GAAP;AAGH;;AAED,SAAS2B,aAAT,GAAwB;AACpB,SAAO;AACHnB,IAAAA,IAAI,EAAGP;AADJ,GAAP;AAGH","sourcesContent":["//import fetch from 'cross-fetch'\nimport fetch from 'cross-fetch'\nimport {apiUrl} from '../../requests/utils'\n\nconst LOGIN_REQUEST = 'LOGIN_REQUEST';\nconst LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nconst LOGIN_FAILURE = 'LOGIN_FAILURE';\n\nconst LOGOUT_REQUEST = 'LOGIN_REQUEST';\nconst LOGOUT_SUCCESS = 'LOGOUT_SUCCESS';\nconst LOGOUT_FAILURE = 'LOGOUT_FAILURE';\n\n\nfunction loginRequest(username,password){\n    return {\n        type: LOGIN_REQUEST,\n        username: username,\n        password: password\n    }\n}\n\nfunction loginSucess(username, password){\n    return {\n        type: LOGIN_SUCCESS,\n        username:username,\n        password:password\n    }\n}\n\nfunction loginFailure(){\n    return {\n        type: LOGIN_FAILURE \n    }\n}\n\n\n\nexport function login(username,password){\n    console.log(\"Login\");\n\n    return function (dispatch){\n\n        dispatch(loginRequest(username,password));\n\n        const loginHeader = {\n            method: 'POST',\n            headers: {\n              'Authorization': 'Basic '+ btoa(username + ':' + password)\n            }\n        }\n\n        return fetch(apiUrl + '/loginApp',loginHeader)\n                .then((response) => {\n                    if (response.ok){\n                        response.json()\n                        .then((responseJson) => {\n                            if (responseJson){\n                                console.log(\"response ok\")\n                                dispatch(loginSucess(username,password))\n                            }\n                            else {\n                                dispatch(loginFailure())\n                            }\n                        });\n                    } else {\n                        dispatch(loginFailure())\n                    }        \n                },\n                    error => {\n                        console.log('An error occurred.', error);\n                        dispatch(loginFailure())\n                    }\n                )\n    }\n}\n\nfunction logoutRequest(){\n    return {\n        type : LOGOUT_REQUEST\n    }\n}\n\nfunction logoutSucess(){\n    return { \n        type : LOGIN_SUCCESS\n    }\n}\n\nfunction logoutFailure(){\n    return {\n        type : LOGIN_FAILURE\n    }\n}"]},"metadata":{},"sourceType":"module"}